[gd_scene load_steps=15 format=3 uid="uid://c6c5wf1tbs1t1"]

[ext_resource type="Texture2D" uid="uid://cq1jm07o5amwv" path="res://art/ghost_placeholder.png" id="2_pqpjq"]

[sub_resource type="GDScript" id="GDScript_fukvx"]
script/source = "class_name Ghost
extends CharacterBody2D

# =====< FEEL FREE TO DELETE/ADD COMMENTS >=====

# references
@onready var game = get_tree().get_root().get_node(\"Game\")
@onready var player = get_node(\"/root/Game/Player\")
@onready var damage_label = load(\"res://scenes/interface/damage_label.tscn\")

# we use AnimationPlayer because it can modify node properties,
# for example we access the Sprite2D's rotation and modulate (color)
# properties to make the animation \"hit\"
@onready var animation_player = $AnimationPlayer
@onready var sprite2D = $Sprite2D
@onready var hit_particles = $CPUParticles2D
 
@onready var navigation_agent = $NavigationAgent2D
var target: Node2D = null

# FLEE is flee from light sources
enum State { IDLE, ROAM, CHASE, STAGGER, FLEE, POSSESS, POSSESSING }
var current_state: State
var direction: Vector2
var can: bool = true

# stats
@export var health: int
@export var damage: int
@export var speed: float
@export var poise: int # how many stagger they need before entering STAGGER
var stagger: int = 0 # track stagger received

var flee_time: float = 0

var is_dead = false
var is_possessing = false

# check boundaries so the enemy can't roam around the whole map
var initial_position
@export var boundary: float

#position
func _ready():
	current_state = State.IDLE
	initial_position = global_position

func _physics_process(delta):
	if !is_dead:
		check_states(delta)

func check_states(delta):
	match current_state:
		State.IDLE:
			animation_player.play(\"walk\")
			
			# always checks true, 'can' is reset to true after $Timer expires
			# we set 'can' to false so the timer is started only once
			if can:
				can = false
				var time = randi_range(1, 3)
				$Timer.start(time)

		State.ROAM:
			animation_player.play(\"walk\")
			roam()
			
			# always checks true, 'can' is reset to true after $Timer expires
			# randomize direction only once after setting to WALK
			if can:
				can = false
				randomize_direction()
				var time = randi_range(1, 3)
				$Timer.start(time)

		State.CHASE:
			animation_player.play(\"walk\")
			chase()

		State.STAGGER:
			animation_player.play(\"stagger\")
			check_flip()
			stagger = 0
			# returns to State.CHASE through _on_animation_player_animation_finished()

		State.FLEE:
			flee(delta)

		State.POSSESS:
			animation_player.play(\"possess\")
			if animation_player.current_animation != \"possess\":
				flee_from(player)
			# turns target's is_possessed to true when \"possess\" anim ends

		State.POSSESSING:
			sprite2D.visible = false
			
			#position = target.position
			if target.is_possessed == false:
				die()
	print(current_state)

func check_flip():
	if direction.x < 0:
		sprite2D.flip_h = true
	elif direction.x > 0:
		sprite2D.flip_h = false

func roam():
	# check boundaries, e.g. initial_position is (0, 0) and boundary is 50:
	# if position.x is 50 or higher, it shouldn't keep going to the right
	# so we randomize the direction again
	var distance = position.distance_to(initial_position)
	if distance >= boundary:
		direction = (initial_position - position).normalized()
		check_flip()
		
	velocity = direction * speed
	move_and_slide()

func chase():
	if position == target.position:
		current_state = State.POSSESS
	
	navigation_agent.target_position = target.position
	
	direction = (target.position - position).normalized()
	check_flip()
	
	velocity = direction * speed
	move_and_slide()

func flee(delta):
	if target:
		direction = (position - target.position).normalized()
		check_flip()
		
		velocity = direction * speed
		move_and_slide()
		
		flee_time += delta
		if flee_time >= 2.0:
			flee_time = 0
			current_state = State.IDLE

# this is just to get the light source position, called by the light source
func flee_from(danger_node: Node2D):
	target = danger_node
	flee_time = 0
	current_state = State.FLEE

func randomize_direction():
	# reset direction so it always enters the while
	direction = Vector2.ZERO
	
	# direction (0, 0) would play the walk animation and not move
	# so we randomize direction until it's not (0, 0) anymore
	while direction == Vector2.ZERO:
		direction = Vector2(randi_range(-1, 1), randi_range(-1, 1)).normalized()
		check_flip()

func take_damage(dmg_amount: int, stg_amount: int): # stagger_amount
	if current_state != State.STAGGER:
		animation_player.play(\"hit\")
	# get angle to player and invert it so particles play opposite to player
	var angle_to_player = (player.position - position).angle()
	hit_particles.rotation = angle_to_player + PI
	
	stagger += stg_amount
	health -= dmg_amount
	
	var label = damage_label.instantiate()
	game.add_child(label)
	label.pos = global_position + Vector2(0, -50)
	label.set_info(global_position + Vector2(0, -50), dmg_amount)
	
	if health <= 0:
		die()
	elif stagger >= poise:
		stagger = 0
		if current_state != State.STAGGER:
			current_state = State.STAGGER
	
	$Timer.start(2) # if expires, stagger is reset

func die():
	animation_player.play(\"death\")
	is_dead = true

# ==============< SIGNALS >===============
func _on_timer_timeout():
	# it means our current state's started $Timer expired
	# meaning we spent 1, 2 or 3 seconds on that state, so we change it
	match current_state:
		State.IDLE:
			current_state = State.ROAM
		State.ROAM:
			current_state = State.IDLE
	can = true
	stagger = 0

# ===============< COLLISIONS >===============

func _on_area_2d_area_entered(area):
	if area.name == \"CorpseArea\":
		print(\"hi\")
		target = area.owner
		current_state = State.CHASE

# =====< HitArea collisions >=====
func _on_hit_area_body_entered(body):
	if body is Player:
		body.take_damage(damage)

func _on_animation_player_animation_finished(anim_name):
	if anim_name == \"possess\":
		print(\"possess ended\")
		current_state = State.POSSESSING
		target.is_possessed = true
"

[sub_resource type="CircleShape2D" id="CircleShape2D_plqom"]
radius = 63.1981

[sub_resource type="CircleShape2D" id="CircleShape2D_ol8rd"]
radius = 7.0

[sub_resource type="CircleShape2D" id="CircleShape2D_bdsuo"]
radius = 7.0

[sub_resource type="Animation" id="Animation_brjvb"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("CollisionShape2D:disabled")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("HurtArea:monitorable")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("CPUParticles2D:amount")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [8]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("CPUParticles2D:explosiveness")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.85]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("CPUParticles2D:direction")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(1, 0)]
}
tracks/8/type = "value"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("CPUParticles2D:spread")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [45.0]
}
tracks/9/type = "value"
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/path = NodePath("CPUParticles2D:position")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 0)]
}
tracks/10/type = "value"
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/path = NodePath("Sprite2D:frame")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_l8cva"]
resource_name = "death"
length = 2.0
step = 0.01
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.4, 0.8, 1.2, 1.4, 1.6, 1.8, 2),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [0.0, 6.28319, 12.5664, 18.8496, 25.1327, 31.4159, 37.6991, 43.9823]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.06, 0.18, 0.24),
"transitions": PackedFloat32Array(1e+06, 1e+06, 1e+06, 1e+06),
"update": 0,
"values": [Color(100, 1, 1, 1), Color(1, 1, 1, 1), Color(100, 1, 1, 1), Color(1, 1, 1, 1)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("CollisionShape2D:disabled")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("HurtArea:monitorable")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Sprite2D:position")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0.8, 1.5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(0, -20)]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("Sprite2D:scale")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(1.6, 2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(0, 0)]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("CPUParticles2D:emitting")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(2),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/8/type = "value"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("CPUParticles2D:explosiveness")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"times": PackedFloat32Array(2),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.05]
}
tracks/9/type = "value"
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/path = NodePath("CPUParticles2D:direction")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/keys = {
"times": PackedFloat32Array(2),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 0)]
}
tracks/10/type = "value"
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/path = NodePath("CPUParticles2D:spread")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/keys = {
"times": PackedFloat32Array(2),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [180.0]
}
tracks/11/type = "value"
tracks/11/imported = false
tracks/11/enabled = true
tracks/11/path = NodePath("CPUParticles2D:position")
tracks/11/interp = 1
tracks/11/loop_wrap = true
tracks/11/keys = {
"times": PackedFloat32Array(2),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, -20)]
}
tracks/12/type = "value"
tracks/12/imported = false
tracks/12/enabled = true
tracks/12/path = NodePath("Sprite2D:frame")
tracks/12/interp = 1
tracks/12/loop_wrap = true
tracks/12/keys = {
"times": PackedFloat32Array(0.01),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [4]
}
tracks/13/type = "value"
tracks/13/imported = false
tracks/13/enabled = true
tracks/13/path = NodePath("CPUParticles2D:amount")
tracks/13/interp = 1
tracks/13/loop_wrap = true
tracks/13/keys = {
"times": PackedFloat32Array(2),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [30]
}

[sub_resource type="Gradient" id="Gradient_jhedb"]
colors = PackedColorArray(0.937255, 0.917647, 0.733333, 1, 0, 0, 0, 1)

[sub_resource type="Animation" id="Animation_tvn3c"]
resource_name = "hit"
length = 0.24
step = 0.01
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CPUParticles2D:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("HurtArea:monitorable")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.23),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("CPUParticles2D:color_ramp")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [SubResource("Gradient_jhedb")]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("CPUParticles2D:amount")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [8]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("CPUParticles2D:direction")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(1, 0)]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("CPUParticles2D:spread")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [45.0]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("CPUParticles2D:explosiveness")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.85]
}
tracks/8/type = "value"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("Sprite2D:frame")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"times": PackedFloat32Array(0.01, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [4, 0]
}
tracks/9/type = "value"
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/path = NodePath("Sprite2D:modulate")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}

[sub_resource type="Animation" id="Animation_1dymt"]
resource_name = "possess"
length = 2.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [1, 2, 3, 0, 1, 2, 3, 0, 1, 2]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}

[sub_resource type="Animation" id="Animation_lw510"]
resource_name = "hit"
length = 2.0
step = 0.01
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0001, 0.4, 0.8, 1),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 0,
"values": [-0.436332, -0.436332, 0.436332, -0.174533, 0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.25, 0.5, 0.75, 1, 1.25, 1.4, 1.55, 1.7, 1.8, 2),
"transitions": PackedFloat32Array(1e+06, 1e+06, 1e+06, 1e+06, 1e+06, 1e+06, 1e+06, 1e+06, 1e+06, 1e+06, 1e+06),
"update": 0,
"values": [Color(100, 100, 100, 1), Color(1, 1, 1, 1), Color(100, 100, 100, 1), Color(1, 1, 1, 1), Color(100, 100, 100, 1), Color(1, 1, 1, 1), Color(100, 100, 100, 1), Color(1, 1, 1, 1), Color(100, 100, 100, 1), Color(1, 1, 1, 1), Color(1, 1, 1, 1)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = false
tracks/3/path = NodePath("CPUParticles2D:emitting")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("HurtArea:monitorable")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0, 0.24),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Sprite2D:frame")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(-0.01),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [4]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("Sprite2D:modulate")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(1.6, 2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Color(1, 1, 1, 1), Color(1, 1, 1, 0.784314)]
}

[sub_resource type="Animation" id="Animation_wwq35"]
resource_name = "walk"
length = 1.7
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.4, 0.6, 0.8, 0.9, 1.1, 1.3, 1.5, 1.6, 1.7),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(0, -9), Vector2(0, -22.5), Vector2(0, -45), Vector2(0, -67.5), Vector2(0, -81), Vector2(0, -81), Vector2(0, -67.5), Vector2(0, -45), Vector2(0, -22.5), Vector2(0, -9), Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.8, 1.7),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Color(1, 1, 1, 0.784314), Color(1, 1, 1, 0.352941), Color(1, 1, 1, 0.784314)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_rs3os"]
_data = {
"RESET": SubResource("Animation_brjvb"),
"death": SubResource("Animation_l8cva"),
"hit": SubResource("Animation_tvn3c"),
"possess": SubResource("Animation_1dymt"),
"stagger": SubResource("Animation_lw510"),
"walk": SubResource("Animation_wwq35")
}

[sub_resource type="Curve" id="Curve_w6a3t"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 2

[node name="Ghost" type="CharacterBody2D"]
position = Vector2(0, -56.25)
scale = Vector2(9, 9)
collision_layer = 0
collision_mask = 4
script = SubResource("GDScript_fukvx")

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 4

[node name="CollisionShape2" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("CircleShape2D_plqom")

[node name="HurtArea" type="Area2D" parent="."]
collision_layer = 2
collision_mask = 2
monitorable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="HurtArea"]
position = Vector2(0, 2)
shape = SubResource("CircleShape2D_ol8rd")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 2)
shape = SubResource("CircleShape2D_bdsuo")

[node name="Timer" type="Timer" parent="."]
one_shot = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_rs3os")
}
autoplay = "RESET"

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("2_pqpjq")
hframes = 4
vframes = 4

[node name="CPUParticles2D" type="CPUParticles2D" parent="."]
emitting = false
lifetime = 0.4
one_shot = true
preprocess = 0.03
explosiveness = 0.85
randomness = 0.6
emission_shape = 1
emission_sphere_radius = 0.1
gravity = Vector2(0, 0)
initial_velocity_min = 70.0
initial_velocity_max = 70.0
scale_amount_min = 40.0
scale_amount_max = 40.0
scale_amount_curve = SubResource("Curve_w6a3t")
color_ramp = SubResource("Gradient_jhedb")

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
path_postprocessing = 1
debug_enabled = true

[connection signal="area_entered" from="Area2D" to="." method="_on_area_2d_area_entered"]
[connection signal="body_entered" from="Area2D" to="." method="_on_area_2d_body_entered"]
[connection signal="body_exited" from="Area2D" to="." method="_on_area_2d_body_exited"]
[connection signal="body_entered" from="HurtArea" to="." method="_on_hit_area_body_entered"]
[connection signal="body_exited" from="HurtArea" to="." method="_on_hit_area_body_exited"]
[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_animation_player_animation_finished"]
